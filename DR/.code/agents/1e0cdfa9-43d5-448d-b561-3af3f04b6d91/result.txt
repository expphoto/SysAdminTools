[2025-09-12T21:40:36] Code v0.2.44
--------
workdir: /Users/techninja/venvspaces/SysAdminTools/DR
model: gpt-5
provider: openai
approval: never
sandbox: read-only
reasoning effort: medium
reasoning summaries: auto
--------
[2025-09-12T21:40:36] User instructions:
Context: You are preparing a plan for a greenfield repository (currently empty) aimed at Windows domain operations from a privileged admin workstation or jump host. The solution should be robust for large estates (hundreds of servers), favor observability, and be safe for repeated runs. Assume users can provide domain credentials when needed and have WinRM permitted across the estate. Focus on reliability, minimal assumptions, and clear reporting for auditors.

Key non-functional requirements:
- Idempotent and re-runnable with deterministic results
- Fast feedback with bounded concurrency and backpressure
- Config-driven behavior; environment specifics live outside code
- Secure credential handling and RBAC-friendly execution (optional JEA)
- Clear blast-radius controls and dry-run mode

Please produce: (1) a detailed plan, (2) a module/function map, (3) an execution flow diagram in text, (4) a risk register with mitigations, (5) a minimal milestone schedule with deliverables.

Note: The local workspace is empty; include any small code snippets inline in your plan if helpful, but do not assume files exist yet. Keep file paths consistent with the proposed structure.

Agent: Design a dynamic, idempotent orchestration script to discover all Active Directory–joined Windows servers, validate availability, detect server roles (e.g., SQL Server, SAP, IIS, DC, File/Print, app services), and automatically start the appropriate services per role. The script should produce a comprehensive report and be safe to re-run until green. It must not require a static server list; instead, it should query AD and adapt to environment changes.

Context and constraints:
- Environment: Windows domain with AD; execution initiated by a domain user with sufficient rights to query AD and manage services via PowerShell Remoting (WinRM). Prioritize PowerShell (Windows PowerShell 5.1+ or PowerShell 7+). Optionally provide a thin Python wrapper for orchestration if it adds value, but PowerShell should be the primary implementation.
- Discovery: Query AD for computer objects where `OperatingSystem -like "Windows Server*"`, support OUs and dynamic filters (tags via description or extensions). Expose allowlist/denylist by OU, host, or regex. Persist snapshot of discovered servers for audit.
- Connectivity: Before role detection, verify reachability using `Test-Connection`, `Test-WSMan`, and a lightweight RPC/SMB check when appropriate. Respect per-host timeouts and backoff; surface failures in the report. Provide a `-SkipUnreachable` toggle and a `-OnlyPreviouslyFailed` rerun mode using last report.
- Remoting + auth: Support SSO (current credentials) or explicit `Get-Credential`. Optionally support Just Enough Administration (JEA) endpoints for least privilege. Do not store plain-text credentials.
- Concurrency: Use PowerShell runspaces or `ForEach-Object -Parallel` with a bounded `-ThrottleLimit`. Default to 20–40 concurrent servers (configurable). Per-host service operations should respect dependency order.
- Role detection (dynamic):
  - SQL Server: detect via `Get-Service` names (e.g., `MSSQL*`, `SQLAgent*`), registry `HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL`, WMI `Win32_Service`, and optional `Get-ItemProperty` for features. Capture named instances.
  - SAP: detect SAP service patterns (e.g., `SAP*`, `SAPHostControl`, `SAP<SID>_*`), SID discovery via registry and filesystem (`usr\sap\*`). Ensure start order (hostctrl → sapsrv → instance services). Allow per-SID overrides.
  - IIS: detect via Windows Feature `Web-Server` and services `W3SVC`, `WAS`.
  - File/Print: detect via features `FS-FileServer`, `Print-Services` and relevant services (e.g., `LanmanServer`, `Spooler`).
  - Domain Controller: detect `AD-Domain-Services`, services `NTDS`, `DNS` (if installed). Skip unsafe starts if in non-authoritative restore scenario.
  - Generic apps: fall back to a configurable mapping of role → service list and/or automatic start of services set to `Automatic` but not `Running` with an allowlist/denylist.
- Service orchestration:
  - Compute target service set per role, deduplicate, resolve dependencies. Start pre-reqs first (e.g., SQL Server before `SQLSERVERAGENT`; `WAS` before `W3SVC`; SAP Host Agent before SAP instance services).
  - Enforce per-service timeouts, retries, and status verification (`Start-Service`, wait for `Status -eq Running`). Gather reasons if fails (disabled, logon failure, access denied, dependency stopped).
  - Cluster awareness: Detect Failover Clustering (`FailoverClusters` module) and avoid starting passive node services directly; use `Start-ClusterGroup` or skip per policy.
- Reporting:
  - Structured results per host, role(s) detected, services attempted/started/skipped/failed, durations, and errors. Emit to CSV + JSON + optional HTML (PSWriteHTML). Store the last run with a timestamp and summary.
  - Provide exit code semantics (0 = all green; 1 = partial failures; 2 = discovery/connectivity errors) and a compact console summary.
- Safety + idempotency: Support `-WhatIf`/`-Confirm`, `-DryRun`, and a `-MaxServers` limit for canary runs. Never change service startup type unless `-FixStartupType` is given.
- Configuration: Externalize environment-specific rules in `config/settings.json` (role allows/denies, overrides, cluster policy, timeouts). Add `config/service-mappings.json` for custom roles.
- Testing: Pester tests for role detection and service orchestration logic using mocks (no remote calls). CI guidance for Windows runners.
- Deliverables: A top-level `Invoke-DR-AutoStart.ps1` entrypoint, modular functions under `powershell/modules`, example config, and docs.

Repo status and structure seed:
- The current repository directory appears empty. Propose the following structure to organize the implementation while allowing discovery and modularity:
  - `powershell/Invoke-DR-AutoStart.ps1` — entrypoint orchestrator (parameters, pipeline, and reporting glue)
  - `powershell/modules/ADDiscovery.psm1` — AD queries, filters, snapshots
  - `powershell/modules/RemoteExec.psm1` — remoting, connectivity checks, retries, concurrency helpers
  - `powershell/modules/RoleDetection.psm1` — role detection strategies (SQL, SAP, IIS, DC, File/Print, generic)
  - `powershell/modules/ServiceActions.psm1` — start/verify services with dependency/order logic
  - `powershell/modules/Reporting.psm1` — emit CSV/JSON/HTML, summaries, exit codes
  - `config/settings.json` and `config/service-mappings.json` — environment overrides
  - `tests/` — Pester unit tests for role detection and orchestration
  - `docs/USAGE.md` — how to run, prerequisites, RBAC, known pitfalls

Useful starting signatures (for reference; you may refine):
- `Get-ADServers -OU <string[]> -Filter <string> -Include <string[]> -Exclude <string[]> -SnapshotPath <string>`
- `Test-ServerConnectivity -ComputerName <string> -Credential <PSCredential> -TimeoutSec <int>`
- `Get-ServerRoles -ComputerName <string> -Credential <PSCredential>`
- `Get-RoleServicePlan -Roles <string[]> -Config <hashtable>`
- `Start-ServicesPlan -ComputerName <string> -Services <string[]> -Order <string[][]> -TimeoutSec <int>`
- `Write-RunReport -Results <object[]> -OutCsv <string> -OutJson <string> -OutHtml <string>`

Output requested:
- A concrete, stepwise implementation plan covering architecture, modules, key functions, data flows, concurrency, error handling, security, testing, and rollout. Include tradeoffs (PowerShell 5.1 vs 7+, remoting modes), recommended defaults, and a staged migration path (dry-run → canary → full). Provide examples for SQL and SAP service handling and an example HTML report layout.

Desired output: Cross-model consensus plan + module/function map + risks + milestones suitable to hand off to implementation.

[Running in read-only mode - no modifications allowed]

[2025-09-12T21:40:41] thinking

**Creating Comprehensive Plan Document**

I need to compile a comprehensive plan document, including items like a detailed plan, module map, execution flow diagram, risk register, milestone schedule, and architecture. Since the environment is read-only, we won't write files or call tools. I'll follow the structured plan format with section headers and bullet points. It’s important to include proposed repository structure, module functions, and concurrency design, also considering backoff strategy and reporting formats like JSON and HTML.
**Developing Role Detection System**

I need to establish a role detection system that includes SQL, SAP, IIS, and other roles, while ensuring cluster awareness. I’ll implement ABAC/RBAC with JEA and handle security through credential management with Get-Credential, using Kerberos and WinRM for remote services instead of CredSSP when possible. Connectivity checks will include Test-Connection and Test-NetConnection on specified ports. For service orchestration, I’ll compute service graphs and testing will involve Pester. Additionally, I’ll create an HTML report layout and include an ASCII-style execution flow diagram.
**Building a Risk Register and Schedule**

I need to create a risk register with categories like discovery completeness, WinRM issues, JEA privilege concerns, and cluster hazards, among others. I'll also include potential mitigations such as dry runs, allowlists, and throttling strategies. Next, I’ll outline a milestones schedule with deliverables, starting from scaffolding to full rollout. I must also consider the trade-offs between PowerShell 5.1 and 7, highlighting features like ForEach-Object -Parallel in version 7 compared to runspaces in 5.1.
**Implementing PSSession and Configurations**

I’ll focus on PSSession usage, especially since it's cross-platform. The ActiveDirectory module is only available on Windows, so I'll use RSAT for that, and for PS7, I’ll rely on the WindowsCompatibility module to import the AD module. Configuration will involve settings like concurrency limits and role service mappings in JSON files. I’ll provide function prototypes, minimal code snippets, and examples of stored snapshots for reporting. It’s essential to include logging and observability practices, focusing on structured logging and metrics without making the answer too lengthy.
**Drafting the Comprehensive Plan**

I realize this is quite a big plan, so I need to keep things concise with crisp bullet points instead of long paragraphs. Each list will have around 4-6 bullets, and I’ll make sure each section is manageable. I might include optional Python wrappers for concurrency and scheduling. I’ll provide a suggested repository structure and touch on the "Cross-model consensus plan," emphasizing that it's pragmatic. I'll create sections like Overview, Detailed Plan, Execution Flow, and others while including inline code snippets as short examples. Let's get started on the final draft!
[2025-09-12T21:41:02] codex
**Developing Role Detection System**

I need to establish a role detection system that includes SQL, SAP, IIS, and other roles, while ensuring cluster awareness. I’ll implement ABAC/RBAC with JEA and handle security through credential management with Get-Credential, using Kerberos and WinRM for remote services instead of CredSSP when possible. Connectivity checks will include Test-Connection and Test-NetConnection on specified ports. For service orchestration, I’ll compute service graphs and testing will involve Pester. Additionally, I’ll create an HTML report layout and include an ASCII-style execution flow diagram.
[2025-09-12T21:41:02] codex
**Building a Risk Register and Schedule**

I need to create a risk register with categories like discovery completeness, WinRM issues, JEA privilege concerns, and cluster hazards, among others. I'll also include potential mitigations such as dry runs, allowlists, and throttling strategies. Next, I’ll outline a milestones schedule with deliverables, starting from scaffolding to full rollout. I must also consider the trade-offs between PowerShell 5.1 and 7, highlighting features like ForEach-Object -Parallel in version 7 compared to runspaces in 5.1.
[2025-09-12T21:41:02] codex
**Implementing PSSession and Configurations**

I’ll focus on PSSession usage, especially since it's cross-platform. The ActiveDirectory module is only available on Windows, so I'll use RSAT for that, and for PS7, I’ll rely on the WindowsCompatibility module to import the AD module. Configuration will involve settings like concurrency limits and role service mappings in JSON files. I’ll provide function prototypes, minimal code snippets, and examples of stored snapshots for reporting. It’s essential to include logging and observability practices, focusing on structured logging and metrics without making the answer too lengthy.
[2025-09-12T21:41:02] codex
**Drafting the Comprehensive Plan**

I realize this is quite a big plan, so I need to keep things concise with crisp bullet points instead of long paragraphs. Each list will have around 4-6 bullets, and I’ll make sure each section is manageable. I might include optional Python wrappers for concurrency and scheduling. I’ll provide a suggested repository structure and touch on the "Cross-model consensus plan," emphasizing that it's pragmatic. I'll create sections like Overview, Detailed Plan, Execution Flow, and others while including inline code snippets as short examples. Let's get started on the final draft!
[2025-09-12T21:41:02] codex

**Overview**
- **Goal:** Idempotent, config-driven PowerShell solution that discovers AD-joined Windows servers, validates reachability, detects roles (SQL, SAP, IIS, DC, File/Print, generic), orchestrates safe service starts, and produces auditable reports. Optimized for large estates with bounded, observable concurrency and backpressure.
- **Defaults:** PowerShell 7+ preferred (ForEach-Object -Parallel); works on Windows PowerShell 5.1 via runspaces. Kerberos SSO by default; -Credential optional. WinRM required.
- **Safety:** Dry-run, WhatIf/Confirm, MaxServers, allow/deny filters, cluster/DC safeguards, never change startup type unless explicitly enabled.

**Repo Structure**
- `powershell/Invoke-DR-AutoStart.ps1` — entrypoint orchestrator
- `powershell/modules/ADDiscovery.psm1` — AD discovery, filters, snapshotting
- `powershell/modules/RemoteExec.psm1` — reachability, remoting, concurrency helpers
- `powershell/modules/RoleDetection.psm1` — SQL/SAP/IIS/DC/File-Print/generic detection
- `powershell/modules/ServiceActions.psm1` — service plan + start/verify with ordering
- `powershell/modules/Reporting.psm1` — CSV/JSON/HTML emission, console summary, exit codes
- `config/settings.json` — timeouts, throttles, policies, filters
- `config/service-mappings.json` — custom roles to services, overrides
- `snapshots/` — discovery snapshots (timestamped)
- `reports/` — run results (timestamped CSV/JSON/HTML)
- `tests/` — Pester unit tests and mocks
- `docs/USAGE.md` — usage, RBAC/JEA, rollout, troubleshooting

**Detailed Plan**
- **Architecture:** Modular PowerShell with clear contracts; stateless per run; config drives behavior; structured outputs.
- **Discovery:** Query AD for `OperatingSystem -like "Windows Server*"`; apply OU/regex allowlist/denylist; persist snapshot.
- **Connectivity:** Test ICMP, WinRM (WSMan), optional TCP 135/445; per-host timeouts, exponential backoff, retries; `-SkipUnreachable` toggle.
- **Remoting:** Create PSSessions with SSO or provided `PSCredential`; optional JEA endpoints; resilient session reuse/pooling.
- **Concurrency:** Bounded parallelism (default 30; configurable); per-host backpressure and global circuit breakers; queue-based orchestration.
- **Role Detection:** Layered: registry, features, services, WMI, filesystem. Deduplicate roles; record evidence.
- **Service Plan:** Derive target services; resolve dependencies; enforce role-specific order rules; per-service timeouts/retries; verify running state.
- **Cluster/DC Awareness:** Detect Failover Clustering; start via `Start-ClusterGroup` where appropriate; DC guardrails (skip unsafe NTDS starts in recovery scenarios).
- **Idempotency:** Dry-run and WhatIf; no changes if already running; do not flip startup types unless `-FixStartupType`; re-run until green.
- **Reporting:** Host-level and global summaries; CSV/JSON/HTML (PSWriteHTML); exit codes (0 all green, 1 partial failures, 2 discovery/connectivity errors).
- **Security:** Secure credential prompting; no plaintext storage; optional JEA; constrained remoting; redact sensitive fields in logs.
- **Testing:** Pester unit tests with mocks for AD/WSMan/services; golden JSON test vectors; CI on Windows runners.
- **Rollout:** Dry-run → canary via `-MaxServers`/OU allowlist → widen scope → full run; keep snapshots and reports per run.

**Module / Function Map**
- `ADDiscovery.psm1`
  - `Get-ADServers -OU <string[]> -Filter <string> -Include <string[]> -Exclude <string[]> -SnapshotPath <string> -MaxServers <int>`
  - `Save-DiscoverySnapshot -Servers <object[]> -Path <string>`
  - `Load-PreviousRun -ReportPath <string> -OnlyPreviouslyFailed`
- `RemoteExec.psm1`
  - `Test-ServerConnectivity -ComputerName <string> -TimeoutSec <int> -RpcCheck -Verbose`
  - `New-Session -ComputerName <string> -Credential <PSCredential> -JEAEndpoint <string>`
  - `Invoke-Remote -Session <PSSession> -ScriptBlock <scriptblock> -Args <object[]> -TimeoutSec <int>`
  - `Invoke-Concurrent -Input <object[]> -ScriptBlock <scriptblock> -ThrottleLimit <int> -CircuitPolicy <hashtable>`
- `RoleDetection.psm1`
  - `Get-ServerRoles -ComputerName <string> -Credential <PSCredential> -Session <PSSession>`
  - Helpers: `Test-RoleSql`, `Test-RoleSap`, `Test-RoleIis`, `Test-RoleDc`, `Test-RoleFilePrint`, `Test-RoleGeneric`
- `ServiceActions.psm1`
  - `Get-RoleServicePlan -Roles <string[]> -Config <hashtable>`
  - `Resolve-ServiceDependencies -Services <string[]> -Session <PSSession>`
  - `Start-ServicesPlan -ComputerName <string> -Services <string[]> -Order <string[][]> -TimeoutSec <int> -Retries <int> -WhatIf`
  - `Start-ClusterWorkloads -ComputerName <string> -Policy <string>`
- `Reporting.psm1`
  - `Write-RunReport -Results <object[]> -OutCsv <string> -OutJson <string> -OutHtml <string>`
  - `Write-ConsoleSummary -Results <object[]>`
  - `Get-ExitCode -Results <object[]>`

**Data & Config**
- `config/settings.json` example:
  - `Concurrency: { "ThrottleLimit": 30, "PerHostTimeoutSec": 120, "ServiceTimeoutSec": 90 }`
  - `Discovery: { "OUs": ["OU=Servers,DC=corp,DC=local"], "Include": [], "Exclude": ["^LAB-"], "Filter": "Enabled -eq $true", "MaxServers": 0 }`
  - `Connectivity: { "RpcCheck": true, "Backoff": { "InitialMs": 500, "MaxMs": 8000, "Retries": 3 } }`
  - `Policies: { "SkipUnreachable": true, "ClusterPolicy": "PreferClusterOps", "FixStartupType": false }`
  - `Reporting: { "Html": true }`
- `config/service-mappings.json` example:
  - `{"Generic": {"AllowAutoStart": true, "AllowList": [], "DenyList": ["Fax","DiagTrack"]}, "CustomRoles": {"AppX":["AppXCore","AppXAgent"]}}`

**Execution Flow (Text Diagram)**
- Start → Load config → Parse params (DryRun, MaxServers, OnlyPreviouslyFailed, filters)
- Discover AD servers → Apply allow/deny filters → Snapshot
- If OnlyPreviouslyFailed → Load last report → Intersect targets
- Connectivity checks (ICMP/WSMan/RPC) with retries/backoff
  - Unreachable → Record failure (connectivity) → Continue or skip per policy
- Create/reuse PSSession per reachable host (SSO or credential/JEA)
- Parallel per-host pipeline (bounded):
  - Detect roles → Build service plan → Cluster/DC guard checks
  - If DryRun/WhatIf → Simulate → Record planned actions
  - Else → Execute ordered starts with verification/retries
  - Collect per-service outcomes, timings, errors
- Aggregate results → Emit CSV/JSON/HTML → Console summary → Exit with code

**Concurrency & Backpressure**
- **Pattern:** ForEach-Object -Parallel with `-ThrottleLimit` (PS7) or runspace pool (PS 5.1).
- **Backoff:** Exponential for connectivity; per-host circuit breaker (stop after N hard failures).
- **Global Circuit:** If global error rate > threshold (e.g., 40% within first 50 hosts), pause or abort unless `-Force`.
- **Queueing:** Chunk targets in batches (e.g., 200) to avoid session thrash; progress per batch.

**Role Detection Details**
- **SQL Server:**
  - Registry: `HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\Instance Names\SQL`
  - Services: `MSSQL*`, `SQLAgent*`; WMI `Win32_Service` for state/logon
  - Instances: capture instance names; features via `Get-ItemProperty`
- **SAP:**
  - Services: `SAPHostControl`, `SAP*`, `SAP<SID>_*`; files: `C:\usr\sap\*`
  - Registry SIDs and instance types; derive start order: HostCtrl → SAPService<SID> → disp+work/instance services
- **IIS:** Feature `Web-Server`; services `WAS`, `W3SVC`
- **File/Print:** Features `FS-FileServer`, `Print-Services`; services `LanmanServer`, `Spooler`
- **DC:** Feature `AD-Domain-Services`; services `NTDS`, `DNS` (if installed). Guard: skip starting `NTDS` if in Directory Services Restore Mode or known restore workflows.
- **Generic:** Auto-`Automatic` not `Running` minus denylist; plus custom role maps.

**Service Orchestration**
- **Order Rules:**
  - SQL: `MSSQL$*` before `SQLSERVERAGENT`/`SQLAgent$*`
  - IIS: `WAS` before `W3SVC`
  - SAP: `SAPHostControl` → `SAPService<SID>` → `SAP<SID>_<inst>`
- **Dependencies:** Use `Get-Service -Name X | Select -Expand RequiredServices` to augment order; perform topological sort.
- **Execution:** For each service:
  - If `Disabled` → record reason; skip unless `-FixStartupType`
  - Start-Service; wait with timeout; verify `Status -eq Running`
  - On failure, collect `ExitCode`, failing dependency, event log snippet (optional, time-bounded)
- **Cluster:** If `Get-Module -ListAvailable FailoverClusters` and node is clustered:
  - Prefer `Start-ClusterGroup -Name <Group>`; else skip passive services per policy.

**Connectivity & Remoting**
- **Checks:** `Test-Connection -Count 1 -Quiet`; `Test-WSMan`; `Test-NetConnection -ComputerName $c -Port 135,445 -InformationLevel Quiet`
- **Sessions:** `New-PSSession -ComputerName $c [-Credential $cred] [-ConfigurationName $jea] -UseSSL:$false`
- **Transport:** Default Kerberos; CredSSP only if needed and accepted by policy.

**Reporting & Exit Codes**
- **Artifacts:** `reports/run-YYYYMMDD-HHmm/` with `results.json`, `results.csv`, `report.html`, `summary.json`
- **Console Summary:** Totals by status and role; top errors with counts; path to artifacts.
- **Exit Codes:** 0 all succeeded; 1 some service/host failures; 2 discovery/connectivity systemic issues.
- **HTML Layout (PSWriteHTML):**
  - Header: Run metadata (start/end, user, domain, throttle, filters)
  - KPI tiles: total hosts, reachable, roles found, services started, failures
  - Charts: by role, by error reason, duration histogram
  - Tables: per-host summary (roles, connectivity, status), per-service outcomes (attempted/started/skipped/failed, error, duration)
  - Filters: role/OU/host; links to raw JSON/CSV

**Security & RBAC**
- **Credentials:** `Get-Credential` on demand; pass `PSCredential` only in memory; no persistence.
- **JEA:** Optional `-JEAEndpoint` for constrained remoting; map operations to required roles.
- **Redaction:** Never log credentials; redact SIDs or paths if sensitive.
- **Least Privilege:** Query AD with read rights; service start via delegated groups or JEA roles.

**Testing & CI**
- **Pester:** Mock `Get-ADComputer`, `Test-WSMan`, `Get-Service`, `Start-Service`, registry reads; test role detection matrices and orchestration ordering/edge cases.
- **Golden Data:** Sample server inventories and expected role/service plans.
- **CI:** GitHub Actions (windows-latest): run Pester; publish coverage and example reports as artifacts.
- **No Remoting in CI:** All remote calls mocked; unit-level determinism.

**Rollout**
- **Stage 1:** Dry-run across limited OU with `-MaxServers 20`; verify reports and discovery.
- **Stage 2:** Canary in each major OU/region; monitor error rates, tune timeouts/filters.
- **Stage 3:** Expand throttle to defaults; run with `-SkipUnreachable`; validate blast radius controls.
- **Stage 4:** Full run with change window; keep snapshots and reports for audit.
- **Stage 5:** Bake into scheduled job with guardrails and notifications.

**Code Snippets (Illustrative)**
- AD discovery:
  ```powershell
  function Get-ADServers {
    param([string[]]$OU,[string]$Filter='OperatingSystem -like "Windows Server*"',[string[]]$Include,[string[]]$Exclude,[int]$MaxServers=0)
    Import-Module ActiveDirectory -ErrorAction Stop
    $scope = if ($OU) { $OU } else { (Get-ADDomain).DistinguishedName }
    $servers = foreach ($s in $scope) {
      Get-ADComputer -LDAPFilter "(objectClass=computer)" -SearchBase $s -SearchScope Subtree -Properties OperatingSystem,IPv4Address,Description |
        Where-Object { $_.OperatingSystem -like "Windows Server*" }
    }
    $names = $servers | Select-Object -Expand DNSHostName
    if ($Include) { $names = $names | Where-Object { $Include -match $_ } }
    if ($Exclude) { $names = $names | Where-Object { $Exclude -notmatch $_ } }
    if ($MaxServers -gt 0) { $names = $names | Select-Object -First $MaxServers }
    return $names
  }
  ```
- Parallel bounded per-host:
  ```powershell
  $Throttle = $Config.Concurrency.ThrottleLimit
  $results = $targets | ForEach-Object -Parallel {
    param($using:Config,$using:Credential)
    # connectivity → role detection → plan → start/verify → result object
  } -ThrottleLimit $Throttle
  ```
- SQL vs SAP start order (ordering)
  ```powershell
  switch ($role) {
    'SQL' { $order = @(@('MSSQLSERVER','MSSQL$*')), @('SQLSERVERAGENT','SQLAgent$*') }
    'SAP' { $order = @(@('SAPHostControl')), @('SAPService*')), @('SAP*_*') }
  }
  ```
- Service start with retry:
  ```powershell
  function Start-ServiceSafe {
    param([string]$Name,[int]$TimeoutSec=90,[int]$Retries=1)
    $svc = Get-Service -Name $Name -ErrorAction SilentlyContinue
    if (-not $svc) { return @{Name=$Name;Status='Unknown';Reason='NotFound'} }
    if ($svc.Status -eq 'Running') { return @{Name=$Name;Status='Running'} }
    if ($svc.StartType -eq 'Disabled') { return @{Name=$Name;Status='Skipped';Reason='Disabled'} }
    for ($i=0; $i -le $Retries; $i++) {
      try { Start-Service -Name $Name -ErrorAction Stop } catch { $err = $_ }
      $ok = (Get-Service -Name $Name).Status -eq 'Running'
      if ($ok) { return @{Name=$Name;Status='Running'} }
      Start-Sleep -Seconds ([Math]::Min(5 * [math]::Pow(2,$i), 20))
    }
    return @{Name=$Name;Status='Failed';Reason=$err.Exception.Message}
  }
  ```

**Tradeoffs (PS 5.1 vs 7+)**
- **PS7+:** Simpler concurrency with `ForEach-Object -Parallel`; better performance; WindowsCompatibility to import AD module.
- **PS5.1:** Native AD module; use runspace pool for concurrency; more boilerplate. Support both by abstracting concurrency in `RemoteExec.Invoke-Concurrent`.

**Risk Register**
- **AD discovery misses/over-matches:** Mitigate with explicit OU scoping, include/deny regex, manual allowlist; snapshot for audit.
- **WinRM blocked/unstable:** Pre-check WSMan/TCP; `-SkipUnreachable`; retries/backoff; exit code 2 for visibility.
- **JEA/permissions insufficient:** Detect access denied; surface RBAC errors; document required roles; optional escalation prompt.
- **Cluster mis-handling:** Detect cluster modules/roles; prefer cluster group actions; default to skip passive nodes.
- **DC unsafe operations:** Detect DSRM/restore; default skip NTDS; require explicit `-AllowDcServiceStart` if needed.
- **Service dependency loops:** Build graph from `RequiredServices`; topo-sort; break on cycles with clear report.
- **SAP complexity variability:** Pattern-based detection with overrides in config; per-SID allowlists; dry-run first.
- **SQL multi-instance nuances:** Use registry for instances; instance-specific services; avoid agent before engine.
- **Performance/overload:** Bounded throttle; global circuit breaker; batch processing; per-host timeouts.
- **Credential exposure:** Never persist; secure strings only in memory; redact logs.
- **Account lockouts via retries:** Backoff with jitter; limit retries; stop after threshold failures.
- **Idempotency gaps:** Always verify state before change; dry-run; do not touch startup type by default.
- **Reporting gaps:** Structured JSON baseline; CSV for Excel; HTML for readability; version reports with schema.

**Milestones & Deliverables**
- **M0 (Week 1):** Scaffolding + config schema + docs outline. Deliver: repo structure, settings.json/service-mappings.json templates.
- **M1 (Week 2):** AD discovery + filters + snapshot. Deliver: `ADDiscovery.psm1`, snapshot JSON/CSV.
- **M2 (Week 3):** Connectivity + session + concurrency helper. Deliver: `RemoteExec.psm1` with tests.
- **M3 (Week 4):** Role detection baseline (SQL/IIS/Generic). Deliver: `RoleDetection.psm1` + Pester tests.
- **M4 (Week 5):** Service orchestration core + ordering + verification. Deliver: `ServiceActions.psm1` + tests.
- **M5 (Week 6):** Cluster awareness + DC guardrails + SAP role. Deliver: cluster/DC/SAP support + tests.
- **M6 (Week 7):** Reporting (CSV/JSON/HTML) + exit codes + console summary. Deliver: `Reporting.psm1`, sample HTML.
- **M7 (Week 8):** Entrypoint orchestrator, dry-run/WhatIf, rerun modes. Deliver: `Invoke-DR-AutoStart.ps1`.
- **M8 (Week 9):** Pester coverage, CI pipeline, docs. Deliver: tests, GitHub Actions, `docs/USAGE.md`.
- **M9 (Week 10):** Pilot (canary OU) and tuning. Deliver: pilot report pack, tuning changes.
- **M10 (Week 11):** Full rollout package + runbook. Deliver: tagged release, runbook, training notes.

**Entrypoint Parameters (Proposed)**
- `Invoke-DR-AutoStart.ps1`
  - `-OUs <string[]> -Include <string[]> -Exclude <string[]> -Filter <string>`
  - `-Credential <PSCredential> -JEAEndpoint <string>`
  - `-ThrottleLimit <int> -MaxServers <int>`
  - `-SkipUnreachable -OnlyPreviouslyFailed -DryRun -WhatIf -Confirm`
  - `-SettingsPath <string> -ServiceMappingsPath <string>`
  - `-OutDir <string>`

**Example HTML Report (Sections)**
- Run Metadata banner → KPI Tiles → Error Summary (top reasons) → Role Distribution donut → Duration histogram
- Per-Host table (Host, OU, Roles, Reachable, Services Attempted/Started/Failed, Cluster/DC flags, Duration)
- Per-Service detail table with expandable rows (order, retries, reasons, last error)
- Filters: role/OU/host/status; export buttons; link to raw JSON/CSV

If you want, I can start by drafting the `settings.json` and function signatures for each module, or produce the Pester test skeletons for discovery and role detection.
[2025-09-12T21:42:36] tokens used: 14739
